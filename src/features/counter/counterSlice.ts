import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import {fetchCount, waitRandomTime} from './counterAPI';

export interface CounterState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  targetIsVisible: boolean;
  simulationIsRunning: boolean;
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
  targetIsVisible: false,
  simulationIsRunning: true
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const autoIncrement2 = createAsyncThunk(
    'counter/autoIncrement',
    async (arg:{amount: number, numTimes: number}, thunkAPI) => {
      await waitRandomTime(3000, 3000, 3000);
      if(arg.numTimes >= 2) {
        thunkAPI.dispatch(autoIncrement2({amount: arg.amount, numTimes: arg.numTimes - 1}));
      }
      return arg;
    }
);

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    clickedPlayButton: (state) => {
      state.simulationIsRunning = true;
    },
    clickedPauseButton: (state) => {
      state.simulationIsRunning = false;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
        .addCase(autoIncrement2.pending, (state) => {
        })
        .addCase(autoIncrement2.fulfilled, (state, action) => {
          state.targetIsVisible = !state.targetIsVisible;
          if(action.payload.numTimes >= 1) {
            state.value += action.payload.amount;
          }
        })
    ;
  },
});

export const { increment, decrement, incrementByAmount, clickedPlayButton, clickedPauseButton} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getCount = (state: RootState) => state.counter.value;

export const getTargetIsVisible = (state: RootState) => state.counter.targetIsVisible;

export const getSimulationIsRunning = (state: RootState) => state.counter.simulationIsRunning;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount: number): AppThunk => (
  dispatch,
  getState
) => {
  const currentValue = getCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default counterSlice.reducer;
